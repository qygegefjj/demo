<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"

	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
	http://www.springframework.org/schema/context 
	http://www.springframework.org/schema/context/spring-context-3.2.xsd
	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
	http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd">

	

	<!-- 解析属性文件配置 -->
	<context:property-placeholder location="classpath:db.properties" />

	<!-- 打开自动绑定的开关 -->
	<context:annotation-config />

	<!-- 1.注解扫描bean -->
	<context:component-scan base-package="com.yz.service,com.yz.dao" />
	
	<!-- 2.管理SqlSessionFactory bean -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 引入数据源 -->
		<property name="dataSource" ref="dataSource" />
		
		<!-- 映射文件配置 -->
		<property name="mapperLocations">
			<array>
				<value>classpath:com/yz/entity/*Mapper.xml</value>
			</array>
		</property>
		
		<!-- 配置別名就是实体的小写的名字 -->
		<property name="typeAliasesPackage" value="com.yz.entity" />
	</bean>

	<!-- 3.管理dataSource bean -->
	<!-- 创建数据源 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<!-- 数据库驱动 -->
		<property name="driverClassName" value="${jdbc.driver}" />
		<!-- 基本属性 url、user、password -->
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="1" />
		<property name="minIdle" value="1" />
		<property name="maxActive" value="20" />
		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="60000" />
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="300000" />
		<property name="validationQuery" value="SELECT 'x'" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />
		<!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
		<property name="poolPreparedStatements" value="true" />
		<property name="maxPoolPreparedStatementPerConnectionSize"
			value="20" />
		<!-- 配置监控统计拦截的filters -->
		<property name="filters" value="stat" />
	</bean>

	
	<!-- 5、生成mapper映射器 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!-- 配置mapper接口在哪个包下 -->
		<property name="basePackage" value="com.yz.dao" />
		<!-- 引用sqlSessionFactory:会有一个问题，spring.xml先生成mapper映射器，引用 sqlSessionFactory，注入dataSource 就会加载数据库驱动。但是此时db.properties还未解析 -->
		<!-- <property name="sqlSessionFactory" ref="sqlSessionFactory" /> -->
		<!-- 不直接引用sqlSessionFactory这个bean了，告诉映射扫描解析类，sqlSessionFactory这个bean的name是啥， 这样，解析类就会在sqlSessionFactory创建成功以后再引用它，相当于延迟了一会引用 -->
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
	</bean>
	
	<!-- 6、事务管理器 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<!-- 注入数据  -->
		<property name="dataSource" ref="dataSource"/>
	</bean>
	
	<!-- 7、aop配置 -->
	<aop:config>
		<aop:pointcut expression="execution(* com.yz.service..*.*(..))" id="pointcut"/>
		<aop:advisor advice-ref="advice" pointcut-ref="pointcut"/>
	</aop:config>
	
	<!-- 8、通知 -->
	<tx:advice id="advice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="find*" propagation="NOT_SUPPORTED" read-only="true"/>
			<tx:method name="get*" propagation="NOT_SUPPORTED" read-only="true"/>
			<tx:method name="select*" propagation="NOT_SUPPORTED" read-only="true"/>
			<tx:method name="*"/>
		</tx:attributes>
	</tx:advice>	
	

</beans>
